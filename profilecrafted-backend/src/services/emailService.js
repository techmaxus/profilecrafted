/**
 * Production Email Service
 * Secure SMTP with industry-standard libraries
 */

const nodemailer = require('nodemailer');
const credentialManager = require('./credentialManager');
const winston = require('winston');

// Configure logger
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.errors({ stack: true }),
    winston.format.json()
  ),
  transports: [
    new winston.transports.File({ filename: 'logs/email-service.log' }),
    new winston.transports.Console({
      format: winston.format.simple()
    })
  ]
});

class EmailService {
  constructor() {
    this.transporter = null;
    this.initializeTransporter();
  }

  /**
   * Initialize secure SMTP transporter
   */
  async initializeTransporter() {
    try {
      logger.info('Initializing email service...', {
        hasHost: !!process.env.SMTP_HOST,
        hasUser: !!process.env.SMTP_USER,
        hasPass: !!process.env.SMTP_PASS,
        host: process.env.SMTP_HOST,
        user: process.env.SMTP_USER
      });

      if (!process.env.SMTP_HOST || !process.env.SMTP_USER || !process.env.SMTP_PASS) {
        logger.warn('SMTP credentials not configured - email service in mock mode');
        return;
      }

      // Create secure transporter with industry-standard configuration
      this.transporter = nodemailer.createTransport({
        host: process.env.SMTP_HOST,
        port: parseInt(process.env.SMTP_PORT) || 587,
        secure: process.env.SMTP_PORT === '465', // true for 465, false for other ports
        auth: {
          user: process.env.SMTP_USER,
          pass: process.env.SMTP_PASS
        },
        tls: {
          rejectUnauthorized: false // Allow self-signed certificates in development
        },
        pool: true,
        maxConnections: 5,
        maxMessages: 100,
        rateDelta: 20000, // 20 seconds
        rateLimit: 5 // max 5 emails per rateDelta
      });

      // Verify connection
      logger.info('Verifying SMTP connection...');
      await this.transporter.verify();
      logger.info('âœ… Real email service initialized successfully with Gmail SMTP');

    } catch (error) {
      logger.error('Failed to initialize email service, falling back to mock:', error);
      this.transporter = null;
    }
  }

  /**
   * Send essay via email with professional template
   */
  async sendEssay(recipientEmail, essay, candidateName = 'Candidate') {
    try {
      if (!this.isValidEmail(recipientEmail)) {
        throw new Error('Invalid email address format');
      }

      if (!essay || essay.trim().length === 0) {
        throw new Error('Essay content is required');
      }

      const emailTemplate = this.buildEmailTemplate(essay, candidateName);

      if (this.transporter) {
        return await this.sendProductionEmail(recipientEmail, emailTemplate);
      } else {
        return this.mockEmailSend(recipientEmail, essay);
      }

    } catch (error) {
      logger.error('Email sending failed:', error);
      throw new Error('Email delivery failed: ' + error.message);
    }
  }

  /**
   * Send production email
   */
  async sendProductionEmail(recipientEmail, emailTemplate) {
    try {
      const mailOptions = {
        from: {
          name: 'ProfileCrafted',
          address: process.env.FROM_EMAIL || process.env.SMTP_USER
        },
        to: recipientEmail,
        subject: emailTemplate.subject,
        text: emailTemplate.text,
        html: emailTemplate.html,
        headers: {
          'X-Mailer': 'ProfileCrafted.com',
          'X-Priority': '3'
        }
      };

      const info = await this.transporter.sendMail(mailOptions);
      
      logger.info(`Email sent successfully to ${recipientEmail}`, {
        messageId: info.messageId,
        response: info.response
      });

      return {
        success: true,
        message: 'Essay sent successfully!',
        messageId: info.messageId
      };

    } catch (error) {
      logger.error('Production email sending failed:', error);
      throw error;
    }
  }

  /**
   * Mock email sending for development
   */
  mockEmailSend(recipientEmail, essay) {
    logger.info(`ðŸ“§ Mock: Sending essay to ${recipientEmail}`);
    logger.info(`Essay preview: ${essay.substring(0, 100)}...`);
    
    return {
      success: true,
      message: 'Essay sent successfully! (Mock mode)',
      mode: 'mock'
    };
  }

  /**
   * Build professional email template
   */
  buildEmailTemplate(essay, candidateName) {
    const subject = `Your ProfileCrafted APM Essay - ${candidateName}`;
    
    const text = `Hi ${candidateName},

Here's your personalized Associate Product Manager application essay generated by ProfileCrafted.com:

${essay}

Best of luck with your application!

---
Generated by ProfileCrafted.com
Your AI-powered career companion`;

    const html = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${subject}</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 8px; margin-bottom: 30px; }
        .content { background: #f8f9fa; padding: 30px; border-radius: 8px; margin-bottom: 20px; }
        .essay { background: white; padding: 25px; border-radius: 6px; border-left: 4px solid #667eea; font-size: 16px; line-height: 1.8; }
        .footer { text-align: center; color: #666; font-size: 14px; }
        .logo { font-size: 24px; font-weight: bold; margin-bottom: 10px; }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">ProfileCrafted</div>
        <p>Your AI-Powered Career Companion</p>
    </div>
    
    <div class="content">
        <h2>Hi ${candidateName},</h2>
        <p>Here's your personalized <strong>Associate Product Manager</strong> application essay:</p>
        
        <div class="essay">
            ${essay.split('\n\n').map(paragraph => `<p>${paragraph}</p>`).join('')}
        </div>
        
        <p><strong>Best of luck with your application!</strong></p>
    </div>
    
    <div class="footer">
        <p>Generated by <strong>ProfileCrafted.com</strong><br>
        Your AI-powered career companion</p>
    </div>
</body>
</html>`;

    return { subject, text, html };
  }

  /**
   * Validate email address format
   */
  isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  /**
   * Check if email service is in production mode
   */
  isProductionMode() {
    return !!this.transporter;
  }

  /**
   * Get email service status
   */
  getStatus() {
    return {
      initialized: !!this.transporter,
      mode: this.transporter ? 'production' : 'mock',
      provider: process.env.SMTP_HOST || 'none'
    };
  }
}

module.exports = new EmailService();
